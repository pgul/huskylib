# $Id$
#
# Legacy makefile for building huskylib (static or shared library, static
# linked programs) on FreeBSD/OpenBSD/NetBSD using BSD native make.
# Run 'make linstall' to install library(ies) into $(LIBDIR)
# Run 'make hinstall' to install C header files.
# No support for the Husky build environment.

prefix=	/usr/local

# Uncomment this for compile info for gdb and display more compiler warnings
DEBUG	= -g -pedantic

# Uncomment this for strip all simbols from binaries to reduce file sizes
#STRIP	= -s

## Directories & permissions ##

BINDIR	= $(prefix)/bin/
LIBDIR	= $(prefix)/lib/
INCDIR	= $(prefix)/include/smapi/
IBOPT	= -m 555 -c
ILOPT	= -m 444 -c
IIOPT	= -m 444 -c
IDOPT	= -d -m 755

## programs ##
CC	= gcc
AR	= ar
RANLIB	= ranlib
INSTALL	= install

## file suffixes ##

_C	= .c
_OBJ	= .o
_LIB	= .a
_EXE	=
_DLL	= .so


## program options ##

# compiler defines
CDEFS	=
# common compiler options
CFLAGS	= -Wall -O3
# i386 addition
.if ${MACHINE_ARCH} == "i386"
   CFLAGS+= -fomit-frame-pointer -fstrength-reduce -m486
.endif
# options for compile only (link is off)
OBJOPT	= -c
# options for build static library
LIBOPT	= -static
# options for build dll
DLLOPT  = -shared
# option for specify output file name
NAMEOPT	= -o
# options for $(AR) program
ARFLAGS	= r
# options for $(RM) program
RMFLAGS	= -f


## Library filename elements ##

# Prefix to construct static library name
LIBPREFIX=lib
# Prefix to construct dll name
DLLPREFIX=lib
# Suffix to construct library name
LIBSUFFIX=bsd
# Suffix to construct dll name
DLLSUFFIX=

## make directives ##

#.PHONY:	distclean clean all static programs default
.SUFFIXES: .c.o
.MAIN: default
.PATH:  $(SRC_DIR)

## Default make rule ##

default:
	@echo Run 'make dll' to build dll version \($(TARGETDLL), $(PROGRAMS)\)
	@echo Run 'make static' to build static version \($(TARGETLIB), $(PROGRAMS)\)
	@echo Run 'make programs' to build static version of programs \($(PROGRAMS)\)
#	@echo Run 'make dllprograms' to build dll version of programs \($(PROGRAMS)\)
	@echo Run 'make all' to build all above

## include common makefiles part ##

.include "makefile.inc"


## Additions (add into end of strings) ##

# libraries need to build binary file (add into end of string)
LIBS	+=

# Append includes dir and debug code generate options (if defined)
CFLAGS	+= -I$(H_DIR)

## make rules ##

all:	static dll programs

static:	$(TARGETLIB)
dll:	$(TARGETDLL)
programs:  $(PROGRAMS)

$(_C)$(_OBJ):
	$(CC) $(CFLAGS) $(CDEFS) $(DEBUG) $(OBJOPT) $<

$(TARGETLIB):	$(OBJS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@
	
$(TARGETDLL):	$(OBJS)
	$(CC) $(DLLOPT) $(CFLAGS) $(DEBUG) $(NAMEOPT)$@ $?

$(PROGRAMS): $(TARGETLIB)
	$(CC) $(STRIP) $(CFLAGS) $(CDEFS) $(DEBUG) $(NAMEOPT)$@ $(SRC_DIR)$*$(_C) $(TARGETLIB) $(LIBS)


clean:
	-$(RM) $(RMFLAGS) *$(_OBJ)

distclean: clean
	-$(RM) $(RMFLAGS) $(TARGETDLL) $(TARGETLIB) $(PROGRAMS) $(TARGETDLL).$(VER)


install:
	@echo " Run 'make linstall' to install static library into $(LIBDIR)"
	@echo " Run 'make dinstall' to install shared library into $(LIBDIR)"
	@echo " Run 'make hinstall' to install C header files into $(INCDIR)"
	@echo " Run 'make proginstall' to install programs into $(BINDIR)"

proginstall: $(PROGRAMS)
	$(INSTALL) $(IDOPT) $(BINDIR)
	$(INSTALL) $(IBOPT) $(PROGRAMS) $(BINDIR)

linstall: $(TARGETLIB)
	$(INSTALL) $(IDOPT) $(LIBDIR)
	$(INSTALL) $(ILOPT) $(TARGETLIB) $(LIBDIR)

dinstall: $(TARGETDLL)
	$(INSTALL) $(IDOPT) $(LIBDIR)
	cp $(TARGETDLL) $(TARGETDLL).$(VER)
	$(INSTALL) $(ILOPT) $(TARGETDLL).$(VER) $(LIBDIR)
	ln -sf $(LIBDIR)$(TARGETDLL).$(VER) $(LIBDIR)$(TARGETDLL).$(VERMAJOR)
	ln -sf $(LIBDIR)$(TARGETDLL).$(VER) $(LIBDIR)$(TARGETDLL).$(VERH)

hinstall:
	$(INSTALL) $(IDOPT) $(INCDIR)
	$(INSTALL) $(IIOPT) $(TARGET_H) $(INCDIR)

uninstall: uninstall-h uninstall-lib uninstall-progs

uninstall-progs:
	-cd $(BINDIR) ; $(RM) $(RMFLAGS) $(PROGRAMS)

uninstall-lib:
	-$(RM) $(RMFLAGS) $(LIBDIR)$(TARGETDLL)
	-$(RM) $(RMFLAGS) $(LIBDIR)$(TARGETDLL).$(VERMAJOR)

uninstall-h:
	-cd $(INCDIR) ; $(RM) $(RMFLAGS) $(TARGET_H)
	-$(RM) $(RMFLAGS) $(INCDIR)
